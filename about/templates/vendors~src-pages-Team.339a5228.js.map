{"version":3,"sources":["webpack:////Users/snehi/Projects/Highlander/node_modules/semantic-ui-react/dist/es/views/Card/CardDescription.js","webpack:////Users/snehi/Projects/Highlander/node_modules/semantic-ui-react/dist/es/views/Card/CardHeader.js","webpack:////Users/snehi/Projects/Highlander/node_modules/semantic-ui-react/dist/es/views/Card/CardMeta.js","webpack:////Users/snehi/Projects/Highlander/node_modules/semantic-ui-react/dist/es/views/Card/CardContent.js","webpack:////Users/snehi/Projects/Highlander/node_modules/semantic-ui-react/dist/es/views/Card/CardGroup.js","webpack:////Users/snehi/Projects/Highlander/node_modules/semantic-ui-react/dist/es/views/Card/Card.js"],"names":["CardDescription","props","children","className","content","textAlign","classes","classnames_default","Object","classNameBuilders","rest","getUnhandledProps","ElementType","getElementType","react_default","a","createElement","extends_default","lib","isNil","handledProps","propTypes","Card_CardDescription","CardHeader","Card_CardHeader","CardMeta","Card_CardMeta","CardContent","description","extra","header","meta","factories","val","autoGenerateKey","Card_CardContent","CardGroup","centered","doubling","items","itemsPerRow","stackable","itemsJSX","map_default","item","key","join","Card_Card","Card_CardGroup","__webpack_require__","d","__webpack_exports__","_Component","Card","_getPrototypeOf2","_this","classCallCheck_default","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn_default","getPrototypeOf_default","call","apply","concat","defineProperty_default","assertThisInitialized_default","e","onClick","inherits_default","createClass_default","value","_this$props","color","fluid","href","image","link","raised","handleClick","Image","create","react"],"mappings":"qUAUA,SAAAA,EAAAC,GACA,IAAAC,EAAAD,EAAAC,SACAC,EAAAF,EAAAE,UACAC,EAAAH,EAAAG,QACAC,EAAAJ,EAAAI,UACAC,EAAgBC,IAAGC,OAAAC,EAAA,EAAAD,CAAgBH,GAAA,cAAAF,GACnCO,EAAaF,OAAAG,EAAA,EAAAH,CAAiBR,EAAAC,GAC9BW,EAAoBJ,OAAAK,EAAA,EAAAL,CAAcR,EAAAC,GAClC,OAASa,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CACrDP,UAAAG,IACMY,EAAA,EAAaC,MAAAjB,GAAAE,EAAAF,GAGnBF,EAAAoB,aAAA,oDACApB,EAAAqB,UAeC,GACc,IAAAC,EAAA,EC9Bf,SAAAC,EAAAtB,GACA,IAAAC,EAAAD,EAAAC,SACAC,EAAAF,EAAAE,UACAC,EAAAH,EAAAG,QACAC,EAAAJ,EAAAI,UACAC,EAAgBC,IAAGC,OAAAC,EAAA,EAAAD,CAAgBH,GAAA,SAAAF,GACnCO,EAAaF,OAAAG,EAAA,EAAAH,CAAiBe,EAAAtB,GAC9BW,EAAoBJ,OAAAK,EAAA,EAAAL,CAAce,EAAAtB,GAClC,OAASa,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CACrDP,UAAAG,IACMY,EAAA,EAAaC,MAAAjB,GAAAE,EAAAF,GAGnBqB,EAAAH,aAAA,oDACAG,EAAAF,UAeC,GACc,IAAAG,EAAA,EC9Bf,SAAAC,EAAAxB,GACA,IAAAC,EAAAD,EAAAC,SACAC,EAAAF,EAAAE,UACAC,EAAAH,EAAAG,QACAC,EAAAJ,EAAAI,UACAC,EAAgBC,IAAGC,OAAAC,EAAA,EAAAD,CAAgBH,GAAA,OAAAF,GACnCO,EAAaF,OAAAG,EAAA,EAAAH,CAAiBiB,EAAAxB,GAC9BW,EAAoBJ,OAAAK,EAAA,EAAAL,CAAciB,EAAAxB,GAClC,OAASa,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CACrDP,UAAAG,IACMY,EAAA,EAAaC,MAAAjB,GAAAE,EAAAF,GAGnBuB,EAAAL,aAAA,oDACAK,EAAAJ,UAeC,GACc,IAAAK,EAAA,EC3Bf,SAAAC,EAAA1B,GACA,IAAAC,EAAAD,EAAAC,SACAC,EAAAF,EAAAE,UACAC,EAAAH,EAAAG,QACAwB,EAAA3B,EAAA2B,YACAC,EAAA5B,EAAA4B,MACAC,EAAA7B,EAAA6B,OACAC,EAAA9B,EAAA8B,KACA1B,EAAAJ,EAAAI,UACAC,EAAgBC,IAAGC,OAAAC,EAAA,EAAAD,CAAUqB,EAAA,SAAkBrB,OAAAC,EAAA,EAAAD,CAAgBH,GAAA,UAAAF,GAC/DO,EAAaF,OAAAG,EAAA,EAAAH,CAAiBmB,EAAA1B,GAC9BW,EAAoBJ,OAAAK,EAAA,EAAAL,CAAcmB,EAAA1B,GAElC,OAAOiB,EAAA,EAAaC,MAAAjB,GAMbgB,EAAA,EAAaC,MAAAf,GAMXU,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CACrDP,UAAAG,IACME,OAAAwB,EAAA,EAAAxB,CAAgBgB,EAAU,SAAAS,GAChC,OACA7B,QAAA6B,IAEGH,EAAA,CACHI,iBAAA,IACM1B,OAAAwB,EAAA,EAAAxB,CAAgBkB,EAAQ,SAAAO,GAC9B,OACA7B,QAAA6B,IAEGF,EAAA,CACHG,iBAAA,IACM1B,OAAAwB,EAAA,EAAAxB,CAAgBc,EAAe,SAAAW,GACrC,OACA7B,QAAA6B,IAEGL,EAAA,CACHM,iBAAA,KAxBWpB,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CACvDP,UAAAG,IACKF,GARMU,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CACvDP,UAAAG,IACKJ,GAgCLyB,EAAAP,aAAA,0FACAO,EAAAN,UA2BC,GACc,IAAAc,EAAA,mBC9Ef,SAAAC,EAAAnC,GACA,IAAAoC,EAAApC,EAAAoC,SACAnC,EAAAD,EAAAC,SACAC,EAAAF,EAAAE,UACAC,EAAAH,EAAAG,QACAkC,EAAArC,EAAAqC,SACAC,EAAAtC,EAAAsC,MACAC,EAAAvC,EAAAuC,YACAC,EAAAxC,EAAAwC,UACApC,EAAAJ,EAAAI,UACAC,EAAgBC,IAAE,KAAOC,OAAAC,EAAA,EAAAD,CAAU6B,EAAA,YAAwB7B,OAAAC,EAAA,EAAAD,CAAU8B,EAAA,YAAwB9B,OAAAC,EAAA,EAAAD,CAAUiC,EAAA,aAA0BjC,OAAAC,EAAA,EAAAD,CAAgBH,GAAaG,OAAAC,EAAA,EAAAD,CAAYgC,GAAA,QAAArC,GAC1KO,EAAaF,OAAAG,EAAA,EAAAH,CAAiB4B,EAAAnC,GAC9BW,EAAoBJ,OAAAK,EAAA,EAAAL,CAAc4B,EAAAnC,GAElC,IAAOiB,EAAA,EAAaC,MAAAjB,GACpB,OAAWY,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CACvDP,UAAAG,IACKJ,GAGL,IAAOgB,EAAA,EAAaC,MAAAf,GACpB,OAAWU,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CACvDP,UAAAG,IACKF,GAGL,IAAAsC,EAAiBC,IAAIJ,EAAA,SAAAK,GACrB,IAAAC,EAAAD,EAAAC,KAAA,CAAAD,EAAAd,OAAAc,EAAAhB,aAAAkB,KAAA,KACA,OAAWhC,EAAAC,EAAKC,cAAe+B,EAAM9B,IAAQ,CAC7C4B,OACKD,MAGL,OAAS9B,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CACrDP,UAAAG,IACGoC,GAGHN,EAAAhB,aAAA,4GACAgB,EAAAf,UA8BC,GACc,IAAA2B,EAAA,EClFfC,EAAAC,EAAAC,EAAA,sBAAAJ,IAsBA,IAAIA,EAEJ,SAAAK,GAGA,SAAAC,IACA,IAAAC,EAEAC,EAEIC,IAAeC,KAAAJ,GAEnB,QAAAK,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAuEA,EAAAL,EAAaK,IACpFF,EAAAE,GAAAJ,UAAAI,GAUA,OAPAR,EAAYS,IAA0BP,MAAAH,EAA2BW,IAAeZ,IAAAa,KAAAC,MAAAb,EAAA,CAAAG,MAAAW,OAAAP,KAE5EQ,IAAgBC,IAAuBA,IAAsBf,IAAA,uBAAAgB,GACjE,IAAAC,EAAAjB,EAAAtD,MAAAuE,QACAA,KAAAD,EAAAhB,EAAAtD,SAGAsD,EA4DA,OAhFEkB,IAASpB,EAAAD,GAuBTsB,IAAYrB,EAAA,EACdR,IAAA,SACA8B,MAAA,WACA,IAAAC,EAAAnB,KAAAxD,MACAoC,EAAAuC,EAAAvC,SACAnC,EAAA0E,EAAA1E,SACAC,EAAAyE,EAAAzE,UACA0E,EAAAD,EAAAC,MACAzE,EAAAwE,EAAAxE,QACAwB,EAAAgD,EAAAhD,YACAC,EAAA+C,EAAA/C,MACAiD,EAAAF,EAAAE,MACAhD,EAAA8C,EAAA9C,OACAiD,EAAAH,EAAAG,KACAC,EAAAJ,EAAAI,MACAC,EAAAL,EAAAK,KACAlD,EAAA6C,EAAA7C,KACAyC,EAAAI,EAAAJ,QACAU,EAAAN,EAAAM,OACA5E,EAAoBC,IAAE,KAAAsE,EAAcrE,OAAAC,EAAA,EAAAD,CAAU6B,EAAA,YAAwB7B,OAAAC,EAAA,EAAAD,CAAUsE,EAAA,SAAkBtE,OAAAC,EAAA,EAAAD,CAAUyE,EAAA,QAAgBzE,OAAAC,EAAA,EAAAD,CAAU0E,EAAA,iBAAA/E,GACtIO,EAAiBF,OAAAG,EAAA,EAAAH,CAAiB6C,EAAAI,KAAAxD,OAClCW,EAAwBJ,OAAAK,EAAA,EAAAL,CAAc6C,EAAAI,KAAAxD,MAAA,WACtC,GAAAuE,EAAA,YAGA,OAAWtD,EAAA,EAAaC,MAAAjB,GAQbgB,EAAA,EAAaC,MAAAf,GAQXU,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CACzDP,UAAAG,EACAyE,OACAP,QAAAf,KAAA0B,cACUC,EAAA,EAAKC,OAAAL,EAAA,CACf9C,iBAAA,KACON,GAAAE,GAAAC,IAAsCjB,EAAAC,EAAKC,cAAemB,EAAW,CAC5EP,cACAE,SACAC,SACOF,GAAYf,EAAAC,EAAKC,cAAemB,EAAW,CAClDN,OAAA,GACOA,IAnBQf,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CAC3DP,UAAAG,EACAyE,OACAP,QAAAf,KAAA0B,cACS/E,GAZMU,EAAAC,EAAKC,cAAAJ,EAA4BK,IAAQ,GAAGP,EAAA,CAC3DP,UAAAG,EACAyE,OACAP,QAAAf,KAAA0B,cACSjF,OA2BTmD,EAjFA,CAkFEiC,EAAA,WAEFjB,IAAgBtB,EAAI,UAAaZ,GAEjCkC,IAAgBtB,EAAI,cAAiBzB,GAErC+C,IAAgBtB,EAAI,QAAWC,GAE/BqB,IAAgBtB,EAAI,SAAYvB,GAEhC6C,IAAgBtB,EAAI,OAAUrB,GAE9B2C,IAAgBtB,EAAI,kKAGpBA,EAAI1B,UAsDH","file":"templates/vendors~src-pages-Team.339a5228.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a description with one or more paragraphs.\n */\n\nfunction CardDescription(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'description', className);\n  var rest = getUnhandledProps(CardDescription, props);\n  var ElementType = getElementType(CardDescription, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardDescription.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardDescription.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardDescription;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a header.\n */\n\nfunction CardHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'header', className);\n  var rest = getUnhandledProps(CardHeader, props);\n  var ElementType = getElementType(CardHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card header can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain content metadata.\n */\n\nfunction CardMeta(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'meta', className);\n  var rest = getUnhandledProps(CardMeta, props);\n  var ElementType = getElementType(CardMeta, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardMeta.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardMeta.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card meta can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardMeta;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\n\nCardContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"extra\", \"header\", \"meta\", \"textAlign\"];\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useWidthProp } from '../../lib';\nimport Card from './Card';\n/**\n * A group of cards.\n */\n\nfunction CardGroup(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      doubling = props.doubling,\n      items = props.items,\n      itemsPerRow = props.itemsPerRow,\n      stackable = props.stackable,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(doubling, 'doubling'), useKeyOnly(stackable, 'stackable'), useTextAlignProp(textAlign), useWidthProp(itemsPerRow), 'cards', className);\n  var rest = getUnhandledProps(CardGroup, props);\n  var ElementType = getElementType(CardGroup, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  var itemsJSX = _map(items, function (item) {\n    var key = item.key || [item.header, item.description].join('-');\n    return React.createElement(Card, _extends({\n      key: key\n    }, item));\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), itemsJSX);\n}\n\nCardGroup.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"content\", \"doubling\", \"items\", \"itemsPerRow\", \"stackable\", \"textAlign\"];\nCardGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A group of cards can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A group of cards can double its column width for mobile. */\n  doubling: PropTypes.bool,\n\n  /** Shorthand array of props for Card. */\n  items: customPropTypes.collectionShorthand,\n\n  /** A group of cards can set how many cards should exist in a row. */\n  itemsPerRow: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A group of cards can automatically stack rows to a single columns on mobile devices. */\n  stackable: PropTypes.bool,\n\n  /** A card group can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardGroup;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\nimport Image from '../../elements/Image';\nimport CardContent from './CardContent';\nimport CardDescription from './CardDescription';\nimport CardGroup from './CardGroup';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card displays site content in a manner similar to a playing card.\n */\n\nvar Card =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Card, _Component);\n\n  function Card() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Card)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (e) {\n      var onClick = _this.props.onClick;\n      if (onClick) onClick(e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          centered = _this$props.centered,\n          children = _this$props.children,\n          className = _this$props.className,\n          color = _this$props.color,\n          content = _this$props.content,\n          description = _this$props.description,\n          extra = _this$props.extra,\n          fluid = _this$props.fluid,\n          header = _this$props.header,\n          href = _this$props.href,\n          image = _this$props.image,\n          link = _this$props.link,\n          meta = _this$props.meta,\n          onClick = _this$props.onClick,\n          raised = _this$props.raised;\n      var classes = cx('ui', color, useKeyOnly(centered, 'centered'), useKeyOnly(fluid, 'fluid'), useKeyOnly(link, 'link'), useKeyOnly(raised, 'raised'), 'card', className);\n      var rest = getUnhandledProps(Card, this.props);\n      var ElementType = getElementType(Card, this.props, function () {\n        if (onClick) return 'a';\n      });\n\n      if (!childrenUtils.isNil(children)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes,\n          href: href,\n          onClick: this.handleClick\n        }), children);\n      }\n\n      if (!childrenUtils.isNil(content)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes,\n          href: href,\n          onClick: this.handleClick\n        }), content);\n      }\n\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), Image.create(image, {\n        autoGenerateKey: false\n      }), (description || header || meta) && React.createElement(CardContent, {\n        description: description,\n        header: header,\n        meta: meta\n      }), extra && React.createElement(CardContent, {\n        extra: true\n      }, extra));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\n_defineProperty(Card, \"Content\", CardContent);\n\n_defineProperty(Card, \"Description\", CardDescription);\n\n_defineProperty(Card, \"Group\", CardGroup);\n\n_defineProperty(Card, \"Header\", CardHeader);\n\n_defineProperty(Card, \"Meta\", CardMeta);\n\n_defineProperty(Card, \"handledProps\", [\"as\", \"centered\", \"children\", \"className\", \"color\", \"content\", \"description\", \"extra\", \"fluid\", \"header\", \"href\", \"image\", \"link\", \"meta\", \"onClick\", \"raised\"]);\n\nexport { Card as default };\nCard.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A Card can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A Card can be formatted to display different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** Shorthand for primary content of CardContent. */\n  extra: customPropTypes.contentShorthand,\n\n  /** A Card can be formatted to take up the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Render as an `a` tag instead of a `div` and adds the href attribute. */\n  href: PropTypes.string,\n\n  /** A card can contain an Image component. */\n  image: customPropTypes.itemShorthand,\n\n  /** A card can be formatted to link to other content. */\n  link: PropTypes.bool,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /**\n   * Called on click. When passed, the component renders as an `a`\n   * tag by default instead of a `div`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func,\n\n  /** A Card can be formatted to raise above the page. */\n  raised: PropTypes.bool\n} : {};"],"sourceRoot":""}